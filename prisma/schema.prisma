generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  roles     UserRole[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id         String         @id @default(uuid())
  name       String         @unique
  users      UserRole[]
  privileges RolePrivilege[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Privilege {
  id    String          @id @default(uuid())
  name  String          @unique
  roles RolePrivilege[]
}

model RolePrivilege {
  roleId      String
  privilegeId String
  role        Role      @relation(fields: [roleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@id([roleId, privilegeId])
}

model ModuleMigrationLog {
  id        String   @id @default(uuid())
  module    String
  file      String
  appliedAt DateTime @default(now())

  @@unique([module, file])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([userId])
  @@index([resource])
  @@index([timestamp])
}

// Core Module Models
model Person {
  id                 String            @id @default(uuid())
  firstName          String
  lastName           String
  middleName         String?
  sex                String            // M, F, U, O
  gender             String            // Man, Woman, Transgender
  birthdate          DateTime?
  birthdateEstimated Boolean           @default(false)
  dead               Boolean           @default(false)
  deathDate          DateTime?
  causeOfDeath       String?
  deathCertificateNumber String?
  patients           Patient[]
  providers          Provider[]
  addresses          PersonAddress[]
  attributes         PersonAttribute[]
  contacts           PersonContact[]
  relationships      Relationship[]    @relation("PersonA")
  relatedTo          Relationship[]    @relation("PersonB")
  nextOfKinFor       NextOfKin[]       @relation("NextOfKinPerson")
  nextOfKin          NextOfKin[]       @relation("PatientPerson")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model PersonAddress {
  id             String   @id @default(uuid())
  personId       String
  preferred      Boolean  @default(false)
  address1       String?
  address2       String?
  cityVillage    String?
  stateProvince  String?
  country        String?
  postalCode     String?
  countyDistrict String?
  address3       String?
  address4       String?
  address5       String?
  address6       String?
  startDate      DateTime?
  endDate        DateTime?
  person         Person   @relation(fields: [personId], references: [id])
  createdAt      DateTime @default(now())

  @@index([personId])
}

model PersonContact {
  id        String   @id @default(uuid())
  personId  String
  type      String   // phone, email, fax
  value     String
  preferred Boolean  @default(false)
  person    Person   @relation(fields: [personId], references: [id])
  createdAt DateTime @default(now())

  @@index([personId])
}

model RelationshipType {
  id            String         @id @default(uuid())
  aIsToB        String         // e.g., "Parent"
  bIsToA        String         // e.g., "Child"
  description   String?
  retired       Boolean        @default(false)
  relationships Relationship[]
  createdAt     DateTime       @default(now())
}

model Relationship {
  id                 String           @id @default(uuid())
  personAId          String
  personBId          String
  relationshipTypeId String
  startDate          DateTime?
  endDate            DateTime?
  personA            Person           @relation("PersonA", fields: [personAId], references: [id])
  personB            Person           @relation("PersonB", fields: [personBId], references: [id])
  relationshipType   RelationshipType @relation(fields: [relationshipTypeId], references: [id])
  createdAt          DateTime         @default(now())

  @@index([personAId])
  @@index([personBId])
}

model NextOfKin {
  id              String   @id @default(uuid())
  patientPersonId String
  nextOfKinPersonId String
  relationship    String
  priority        Int      @default(1)
  contactPhone    String?
  contactEmail    String?
  address         String?
  patient         Person   @relation("PatientPerson", fields: [patientPersonId], references: [id])
  nextOfKinPerson Person   @relation("NextOfKinPerson", fields: [nextOfKinPersonId], references: [id])
  createdAt       DateTime @default(now())

  @@index([patientPersonId])
}

model PersonAttribute {
  id              String              @id @default(uuid())
  personId        String
  attributeTypeId String
  value           String
  person          Person              @relation(fields: [personId], references: [id])
  attributeType   PersonAttributeType @relation(fields: [attributeTypeId], references: [id])
  createdAt       DateTime            @default(now())

  @@index([personId])
}

model PersonAttributeType {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  format      String            // text, number, date, boolean, coded
  required    Boolean           @default(false)
  attributes  PersonAttribute[]
}

model Patient {
  id            String              @id @default(uuid())
  personId      String
  identifiers   PatientIdentifier[]
  encounters    Encounter[]
  appointments  Appointment[]
  observations  Observation[]
  prescriptions Prescription[]
  billings      Billing[]
  drugOrders    DrugOrder[]
  orders        Order[]
  enrollments   ProgramEnrollment[]
  cohortMembers CohortMember[]
  person        Person              @relation(fields: [personId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([personId])
}

model PatientIdentifier {
  id               String         @id @default(uuid())
  patientId        String
  identifierTypeId String
  identifier       String
  preferred        Boolean        @default(false)
  locationId       String?
  patient          Patient        @relation(fields: [patientId], references: [id])
  identifierType   IdentifierType @relation(fields: [identifierTypeId], references: [id])
  createdAt        DateTime       @default(now())

  @@unique([identifier, identifierTypeId])
  @@index([patientId])
}

model IdentifierType {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  format            String?
  required          Boolean             @default(false)
  checkDigit        Boolean             @default(false)
  retired           Boolean             @default(false)
  patientIdentifiers PatientIdentifier[]
  identifierSources IdentifierSource[]
}

model IdentifierSource {
  id                  String             @id @default(uuid())
  name                String             @unique
  description         String?
  identifierTypeId    String
  baseCharacterSet    String?
  prefix              String?
  suffix              String?
  firstIdentifierBase String?
  minLength           Int?
  maxLength           Int?
  retired             Boolean            @default(false)
  identifierType      IdentifierType     @relation(fields: [identifierTypeId], references: [id])
  pooledIdentifiers   PooledIdentifier[]
  createdAt           DateTime           @default(now())

  @@index([identifierTypeId])
}

model PooledIdentifier {
  id         String           @id @default(uuid())
  sourceId   String
  identifier String           @unique
  used       Boolean          @default(false)
  dateUsed   DateTime?
  comment    String?
  source     IdentifierSource @relation(fields: [sourceId], references: [id])
  createdAt  DateTime         @default(now())

  @@index([sourceId, used])
}

model Provider {
  id            String        @id @default(uuid())
  personId      String?
  identifier    String?       @unique
  name          String?
  retired       Boolean       @default(false)
  person        Person?       @relation(fields: [personId], references: [id])
  encounters    Encounter[]
  appointments  Appointment[]
  prescriptions Prescription[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([personId])
}

model Location {
  id          String              @id @default(uuid())
  name        String
  description String?
  address     String?
  cityVillage String?
  stateProvince String?
  country     String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  parentLocationId String?
  retired     Boolean             @default(false)
  phone       String?
  encounters  Encounter[]
  appointments Appointment[]
  enrollments ProgramEnrollment[]
  parent      Location?           @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  children    Location[]          @relation("LocationHierarchy")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([parentLocationId])
}

model Encounter {
  id           String        @id @default(uuid())
  patientId    String
  providerId   String
  locationId   String?
  encounterType String
  startDate    DateTime
  endDate      DateTime?
  notes        String?
  patient      Patient       @relation(fields: [patientId], references: [id])
  provider     Provider      @relation(fields: [providerId], references: [id])
  location     Location?     @relation(fields: [locationId], references: [id])
  observations Observation[]
  visits       Visit[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([patientId])
  @@index([providerId])
}

model Appointment {
  id              String    @id @default(uuid())
  patientId       String
  providerId      String
  locationId      String?
  appointmentDate DateTime
  appointmentTime String
  reason          String?
  status          String    @default("scheduled")
  patient         Patient   @relation(fields: [patientId], references: [id])
  provider        Provider  @relation(fields: [providerId], references: [id])
  location        Location? @relation(fields: [locationId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([patientId])
  @@index([providerId])
  @@index([appointmentDate])
}

model Concept {
  id           String        @id @default(uuid())
  name         String        @unique
  datatype     String
  conceptClass String?
  units        String?
  description  String?
  retired      Boolean       @default(false)
  answers      ConceptAnswer[] @relation("ConceptAnswers")
  questions    ConceptAnswer[] @relation("ConceptQuestions")
  observations Observation[]
  formFields   FormField[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ConceptAnswer {
  id         String  @id @default(uuid())
  conceptId  String
  answerConcept String
  sortWeight Float?
  concept    Concept @relation("ConceptQuestions", fields: [conceptId], references: [id])
  answer     Concept @relation("ConceptAnswers", fields: [answerConcept], references: [id])

  @@unique([conceptId, answerConcept])
}

model Form {
  id            String      @id @default(uuid())
  name          String      @unique
  version       String
  description   String?
  encounterType String?
  published     Boolean     @default(false)
  retired       Boolean     @default(false)
  fields        FormField[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model FormField {
  id          String   @id @default(uuid())
  formId      String
  conceptId   String?
  fieldNumber Int
  fieldPart   String?
  pageNumber  Int?
  minOccurs   Int?
  maxOccurs   Int?
  required    Boolean  @default(false)
  sortWeight  Float?
  form        Form     @relation(fields: [formId], references: [id])
  concept     Concept? @relation(fields: [conceptId], references: [id])

  @@index([formId])
}

model AddressHierarchyLevel {
  id           String                  @id @default(uuid())
  name         String                  @unique
  levelId      Int                     @unique
  addressField String
  required     Boolean                 @default(false)
  parentId     String?
  parent       AddressHierarchyLevel?  @relation("LevelHierarchy", fields: [parentId], references: [id])
  children     AddressHierarchyLevel[] @relation("LevelHierarchy")
  entries      AddressHierarchyEntry[]
}

model AddressHierarchyEntry {
  id               String                @id @default(uuid())
  name             String
  levelId          String
  parentId         String?
  userGeneratedId  String?
  latitude         Float?
  longitude        Float?
  level            AddressHierarchyLevel @relation(fields: [levelId], references: [id])
  parent           AddressHierarchyEntry? @relation("EntryHierarchy", fields: [parentId], references: [id])
  children         AddressHierarchyEntry[] @relation("EntryHierarchy")

  @@index([levelId])
  @@index([parentId])
}

model Drug {
  id          String      @id @default(uuid())
  name        String
  genericName String?
  strength    String?
  dosageForm  String
  units       String?
  concept     String?
  retired     Boolean     @default(false)
  drugOrders  DrugOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model DrugOrder {
  id            String   @id @default(uuid())
  patientId     String
  drugId        String
  orderId       String?
  dose          Float?
  doseUnits     String?
  frequency     String?
  quantity      Float?
  quantityUnits String?
  duration      Int?
  durationUnits String?
  route         String?
  instructions  String?
  startDate     DateTime
  endDate       DateTime?
  status        String   @default("ACTIVE")
  patient       Patient  @relation(fields: [patientId], references: [id])
  drug          Drug     @relation(fields: [drugId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([patientId])
  @@index([drugId])
}

model Order {
  id              String   @id @default(uuid())
  patientId       String
  encounterId     String?
  orderTypeId     String
  conceptId       String
  orderer         String
  urgency         String   @default("ROUTINE")
  instructions    String?
  startDate       DateTime
  autoExpireDate  DateTime?
  discontinued    Boolean  @default(false)
  discontinuedDate DateTime?
  discontinuedReason String?
  status          String   @default("NEW")
  patient         Patient  @relation(fields: [patientId], references: [id])
  encounter       Encounter? @relation(fields: [encounterId], references: [id])
  concept         Concept  @relation(fields: [conceptId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([patientId])
  @@index([encounterId])
}

model Program {
  id          String              @id @default(uuid())
  name        String              @unique
  description String?
  concept     String?
  retired     Boolean             @default(false)
  enrollments ProgramEnrollment[]
  workflows   ProgramWorkflow[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model ProgramWorkflow {
  id        String                 @id @default(uuid())
  programId String
  concept   String
  retired   Boolean                @default(false)
  program   Program                @relation(fields: [programId], references: [id])
  states    ProgramWorkflowState[]
  createdAt DateTime               @default(now())

  @@index([programId])
}

model ProgramWorkflowState {
  id                 String          @id @default(uuid())
  programWorkflowId  String
  concept            String
  initial            Boolean         @default(false)
  terminal           Boolean         @default(false)
  retired            Boolean         @default(false)
  programWorkflow    ProgramWorkflow @relation(fields: [programWorkflowId], references: [id])

  @@index([programWorkflowId])
}

model ProgramEnrollment {
  id            String    @id @default(uuid())
  patientId     String
  programId     String
  dateEnrolled  DateTime
  dateCompleted DateTime?
  locationId    String?
  outcome       String?
  voided        Boolean   @default(false)
  patient       Patient   @relation(fields: [patientId], references: [id])
  program       Program   @relation(fields: [programId], references: [id])
  location      Location? @relation(fields: [locationId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([patientId])
  @@index([programId])
}

model Cohort {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  members     CohortMember[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CohortMember {
  id        String   @id @default(uuid())
  cohortId  String
  patientId String
  startDate DateTime
  endDate   DateTime?
  cohort    Cohort   @relation(fields: [cohortId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
  createdAt DateTime @default(now())

  @@unique([cohortId, patientId])
  @@index([cohortId])
  @@index([patientId])
}

model Observation {
  id          String     @id @default(uuid())
  patientId   String
  encounterId String?
  conceptId   String
  value       String
  units       String?
  notes       String?
  obsDate     DateTime   @default(now())
  patient     Patient    @relation(fields: [patientId], references: [id])
  encounter   Encounter? @relation(fields: [encounterId], references: [id])
  concept     Concept    @relation(fields: [conceptId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([patientId])
  @@index([conceptId])
}

model Visit {
  id          String     @id @default(uuid())
  patientId   String
  encounterId String?
  visitType   String
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  encounter   Encounter? @relation(fields: [encounterId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([patientId])
}

model Laboratory {
  id        String   @id @default(uuid())
  patientId String
  testName  String
  result    String?
  status    String   @default("pending")
  orderedAt DateTime @default(now())
  resultAt  DateTime?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
}

model Radiology {
  id        String   @id @default(uuid())
  patientId String
  studyType String
  result    String?
  status    String   @default("pending")
  orderedAt DateTime @default(now())
  resultAt  DateTime?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Custom Module Models
model Inventory {
  id             String    @id @default(uuid())
  itemName       String
  category       String
  quantity       Int
  unitPrice      Float
  supplier       String?
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([category])
}

model Billing {
  id          String    @id @default(uuid())
  patientId   String
  serviceCode String
  amount      Float
  description String?
  status      String    @default("pending")
  insuranceId String?
  paymentDate DateTime?
  patient     Patient   @relation(fields: [patientId], references: [id])
  insurance   Insurance? @relation(fields: [insuranceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([patientId])
  @@index([status])
}

model Insurance {
  id           String    @id @default(uuid())
  policyNumber String    @unique
  provider     String
  policyHolder String
  coverage     Json?
  billings     Billing[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Prescription {
  id            String   @id @default(uuid())
  patientId     String
  prescriberId  String
  medicationName String
  dosage        String
  quantity      Int
  instructions  String?
  status        String   @default("pending")
  dispensedDate DateTime?
  patient       Patient  @relation(fields: [patientId], references: [id])
  prescriber    Provider @relation(fields: [prescriberId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([patientId])
  @@index([prescriberId])
}

model TelemedicineSession {
  id        String   @id @default(uuid())
  patientId String
  providerId String
  sessionUrl String?
  startTime DateTime
  endTime   DateTime?
  status    String   @default("scheduled")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([providerId])
}

model MobileClinic {
  id        String   @id @default(uuid())
  name      String
  location  String
  schedule  Json?
  services  String[]
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          String   @id @default(uuid())
  title       String
  type        String
  parameters  Json?
  generatedBy String
  filePath    String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([generatedBy])
}